/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.3 Bouquet.gltf
*/

import React, { useEffect, useRef, useState } from 'react'
import { useGLTF } from '@react-three/drei'
import { useFrame, useThree } from '@react-three/fiber';
import { EffectComposer, Outline, Select, Selection } from '@react-three/postprocessing';
import { gsap } from 'gsap';

export function Bouquet(props) {
  const { nodes, materials } = useGLTF('/GLTFs/Bouquet.gltf')
  const {move, setMove, bouquetVisible, setState, setProductListVisible, setCurrentCategory} = props
  const bouquetRef = useRef();
  const {scene} = useThree();
  const [outline, setOutline] = useState(false)
  useFrame(() => {
    if (bouquetRef.current) {
      bouquetRef.current.rotation.y += 0.001;
    }
    if(outline) document.getElementById('root').style.cursor = "pointer"
    else document.getElementById('root').style.cursor = "default"
  });

  useEffect(() => {
    if(bouquetVisible) Add();
    else Remove();
  }, [bouquetVisible])

  const Remove = () => {
    bouquetRef?.current?.traverse(child => {
      if(child.isMesh) {
        gsap.to(child.material, {
          transparent: true,
          opacity: 0,
          duration: 2,
          onComplete: () => {
            scene.remove(bouquetRef.current)
          }
        })
      }
    })
  }

  useEffect(() => {
    console.log(move)
    let dir = 20;
    if(!move) dir = -20
    if(bouquetRef.current)
      gsap.to(bouquetRef.current.position, {
        z: bouquetRef.current.position.z + dir,
        duration: 2,
        ease: "power3.inOut"
      })
  }, [move]);

  const Add = () => {
    bouquetRef?.current?.traverse(child => {
      if(child.isMesh) {
        scene.add(bouquetRef.current)
        gsap.to(child.material, {
          transparent: false,
          opacity: 1,
          duration: 2,
        })
      }
    })
  }

  return (
    <Selection>
      <EffectComposer multisampling={8} autoClear={false}>
            <Outline blur visibleEdgeColor="white" edgeStrength={10} width={500}/>
          </EffectComposer>
          <group onClick={() => {
            setState(2)
            setProductListVisible(true)
            setCurrentCategory("bouquet")
          }} onPointerOver={() => setOutline(true)} onPointerOut={() => setOutline(false)} ref={bouquetRef} {...props} dispose={null}>
        <Select enabled={outline}>
        <group  scale={0.08}>
          <mesh geometry={nodes['13504_Bride_Bouquet_v1_L1_1'].geometry} material={materials._13504_Bride_Bouquet_v1_L113504BrideBouquet_rose_top} />
          <mesh geometry={nodes['13504_Bride_Bouquet_v1_L1_2'].geometry} material={materials._13504_Bride_Bouquet_v1_L113504BrideBouquet_roseleaves} />
          <mesh geometry={nodes['13504_Bride_Bouquet_v1_L1_3'].geometry} material={materials._13504_Bride_Bouquet_v1_L113504BrideBouquet_paper} />
          <mesh geometry={nodes['13504_Bride_Bouquet_v1_L1_4'].geometry} material={materials._13504_Bride_Bouquet_v1_L113504BrideBouquet_ribbon} />
        </group>
      </Select>
      </group>
    </Selection>
    
      
      
  )
}

useGLTF.preload('/Bouquet.gltf')
